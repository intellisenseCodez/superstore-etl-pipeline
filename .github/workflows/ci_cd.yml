name: ETL Pipeline

on:
    workflow_dispatch:

    # schedule:
    #     - cron: '0 0 * * *'  # Runs at 12.00 AM every day


jobs:
    extract-and-load:
        name: Extract and Load Raw Data to Postgres
        runs-on: ubuntu-latest
        env:
            DATABASE_USER: ${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
 
        services:
            postgres:
                image: postgres:14
                env:
                    POSTGRES_USER: ${{ env.DATABASE_USER }}
                    POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
                    POSTGRES_DB: ${{ env.DATABASE_NAME }}
                ports:
                    - "5432:5432"
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
            
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up python 3.10
              uses: actions/setup-python@v5
              with:
                python-version: "3.10"
            
            - name: Install dependencies
              run: |
                echo "Installing requirements ..."
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: Detect PostgreSQL container and set DB_HOST
              run: |
                DB_HOST=$(docker ps --format "{{.Names}}" | grep -i postgres || true)

                if [ -n "$DB_HOST" ]; then
                    echo "‚úÖ Found PostgreSQL container: $DB_HOST"
                else
                    echo "‚ö†Ô∏è No running PostgreSQL container found! Using 'localhost'"
                    DB_HOST="localhost"
                fi

                echo "Database host set to: $DB_HOST"
                echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
                    


            - name: Wait for Postgres to be ready
              run: |
                echo "‚è≥ Waiting for PostgreSQL to be ready..."
                until pg_isready -h $DB_HOST -p 5432 -U $DATABASE_USER; do
                    echo "Waiting for Postgres..."
                    sleep 5
                done
                echo "‚úÖ PostgreSQL is ready!"


            # - name: Extract and Load Raw Data to Postgres
            #   env:
            #     DATABASE_NAME: ${{ env.DATABASE_NAME }}
            #     DATABASE_USER: ${{ env.DATABASE_USER }}
            #     DATABASE_PASSWORD: ${{ env.DATABASE_PASSWORD }}
            #     DATABASE_HOST: postgres 
            #     PORT: ${{ job.services.postgres.ports[5432] }}
            #   run: |
            #     echo "üöÄ Running ETL process..."
            #     python etl/main.py

