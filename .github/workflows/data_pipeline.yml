name: ETL Data Pipeline

on:
    workflow_dispatch: # manual trigger
    schedule:
        - cron: '0 0 * * *'  # Runs at 12.00 AM every day
    push:
        branches:
            - main
            - feat/etl-service



jobs:
    test-etl-pipeline:
        name: Extract and Load Raw Data to Postgres
        runs-on: ubuntu-latest
        env:
            DATABASE_USER: ${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}


        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Start PostgreSQL container
              run: |
                docker run -d \
                --name postgres_test \
                -e POSTGRES_USER=${{ secrets.DATABASE_USER }} \
                -e POSTGRES_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
                -e POSTGRES_DB=${{ secrets.DATABASE_NAME }} \
                -v ${{ github.workspace }}/scripts/pg_init.sql:/docker-entrypoint-initdb.d/pg_init.sql:ro \
                -p 5432:5432 \
                postgres:14
                    
                echo "Waiting for PostgreSQL to be ready..."
                for i in {1..15}; do
                    if docker exec postgres_test pg_isready -U ${{ secrets.DATABASE_USER }} > /dev/null 2>&1; then
                        echo "‚úÖ PostgreSQL is ready!"
                        break
                    fi
                    
                    echo "‚è≥ Waiting for database ($i/15)..."
                    sleep 5
                done

            - name: Set up python 3.10
              uses: actions/setup-python@v5
              with:
                python-version: "3.10"
            
            - name: Install dependencies
              run: |
                echo "Installing requirements ..."
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: Run ETL
              env:
                DATABASE_NAME: ${{ env.DATABASE_NAME }}
                DATABASE_USER: ${{ env.DATABASE_USER }}
                DATABASE_PASSWORD: ${{ env.DATABASE_PASSWORD }}
                DATABASE_HOST: localhost
                PORT: 5432
              run: |
                echo 'üöÄ Starting ETL process...'
            
                python3 etl/main.py
                echo '‚úÖ ETL pipeline completed successfully.'


    test-dbt-pipeline:
        name: Run DBT Models and Tests
        runs-on: ubuntu-latest
        needs: test-etl-pipeline  
        env:
            DATABASE_USER: ${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_HOST: localhost
            DATABASE_PORT: 5432

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up PostgreSQL (restore from ETL)
              run: |
                docker run -d \
                --name postgres_test \
                -e POSTGRES_USER=${{ secrets.DATABASE_USER }} \
                -e POSTGRES_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
                -e POSTGRES_DB=${{ secrets.DATABASE_NAME }} \
                -v ${{ github.workspace }}/scripts/pg_init.sql:/docker-entrypoint-initdb.d/pg_init.sql:ro \
                -p 5432:5432 \
                postgres:14
              
                echo "Waiting for PostgreSQL to be ready..."
                
                for i in {1..15}; do
                    if docker exec postgres_test pg_isready -U ${{ secrets.DATABASE_USER }} > /dev/null 2>&1; then
                        echo "‚úÖ PostgreSQL is ready!"
                        break
                    fi
                    
                    echo "‚è≥ Waiting for database ($i/15)..."
                    sleep 5
                done

            - name: Install dbt and dependencies
              run: |
                pip install --upgrade pip
                pip install dbt-postgres

            - name: Copy dbt profile
              run: |
                mkdir -p ~/.dbt
                cp profiles.yml ~/.dbt/profiles.yml
                echo "‚úÖ Copied profiles.yml to ~/.dbt/"

            - name: Verify dbt project
              run: |
                echo "Checking dbt project validity..."
                cd ./dbt
                dbt debug

            - name: Run dbt models
              run: |
                echo "üèóÔ∏è Running dbt models..."
                cd ./dbt
                dbt run

            - name: Run dbt tests
              run: |
                echo "üß™ Running dbt tests..."
                cd ./dbt
                dbt test

    build-and-push-etl-docker:
        name: Build & Push ETL Pipeline Docker Image
        runs-on: ubuntu-latest
        needs: [test-etl-pipeline]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and Push Docker Image
              uses: docker/build-push-action@v6
              with:
                context: .
                file: ./docker/etl/Dockerfile
                push: true
                tags: |
                    ${{ secrets.DOCKERHUB_USERNAME }}/etl-app-pipeline:latest
                    ${{ secrets.DOCKERHUB_USERNAME }}/etl-app-pipeline:${{ github.sha }}

            - name: Image Summary
              run: |
                echo "‚úÖ Successfully built and pushed Docker image:"
                echo "üîπ Image: ${{ secrets.DOCKERHUB_USERNAME }}/etl-app-pipeline:latest"


    build-and-push-dbt-docker:
        name: Build & Push DBT Docker Image
        runs-on: ubuntu-latest
        needs: [test-dbt-pipeline]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and Push Docker Image
              uses: docker/build-push-action@v6
              with:
                context: .
                file: ./docker/dbt/Dockerfile
                push: true
                tags: |
                    ${{ secrets.DOCKERHUB_USERNAME }}/dbt_project:latest
                    ${{ secrets.DOCKERHUB_USERNAME }}/dbt_project:${{ github.sha }}

            - name: Image Summary
              run: |
                echo "‚úÖ Successfully built and pushed Docker image:"
                echo "üîπ Image: ${{ secrets.DOCKERHUB_USERNAME }}/dbt_project:latest"
